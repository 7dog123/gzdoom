#include "gl/system/gl_system.h"
#include "doomtype.h"
#include "g_level.h"
#include "sc_man.h"
#include "w_wad.h"
#include "r_state.h"
//#include "gl/gl_intern.h"

#include "gl/system/gl_interface.h"
#include "gl/data/gl_data.h"
#include "gl/renderer/gl_lightdata.h"
#include "gl/renderer/gl_renderstate.h"
#include "gl/scene/gl_drawinfo.h"
#include "gl/scene/gl_portal.h"
#include "gl/shaders/gl_shader.h"
#include "gl/textures/gl_bitmap.h"
#include "gl/textures/gl_texture.h"
#include "gl/textures/gl_skyboxtexture.h"
#include "gl/textures/gl_material.h"


#include "c_console.h"
#include "gl/system/gl_cvars.h"

#include "doomstat.h"
#include "v_video.h"

#include "r_utility.h"
#include "p_local.h"
#include "sbar.h"
#include "sbarinfo.h"
#include "gl/textures/gl_combiners.h"//[GEC]
#include "gl/scene/gl_skynew.h"//[GEC]

FSkyBox * sky = NULL;
bool drawsky = false;

unsigned char FIRE64x64[4096] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x30, 0x00, 0x00,
	0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x10, 0x30, 0x20, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x30, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
	0x00, 0x00, 0x30, 0x40, 0x30, 0x40, 0x20, 0x30, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x40, 0x00, 0x00, 0x10, 0x00, 0x40,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x20, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10,
	0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x40, 0x00, 0x00, 0x10, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x10, 0x20, 0x10, 0x00, 0x10, 0x20, 0x20, 0x00,
	0x20, 0x10, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x30, 0x20, 0x00, 0x00, 0x10, 0x20, 0x20, 0x20, 0x10, 0x20, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x40, 0x50, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x30,
	0x10, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x10, 0x00, 0x00, 0x20, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x20, 0x00, 0x20, 0x00,
	0x20, 0x00, 0x00, 0x10, 0x00, 0x20, 0x10, 0x20, 0x00, 0x30, 0x00, 0x30,
	0x10, 0x20, 0x20, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x50, 0x00, 0x10,
	0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x30, 0x20, 0x40, 0x10, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x30, 0x30, 0x10,
	0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x10, 0x20, 0x30, 0x10,
	0x40, 0x30, 0x10, 0x20, 0x00, 0x00, 0x00, 0x10, 0x30, 0x10, 0x00, 0x00,
	0x00, 0x60, 0x10, 0x40, 0x10, 0x60, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x10, 0x20, 0x00, 0x10, 0x50, 0x40, 0x30, 0x10, 0x20, 0x30,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x20, 0x00, 0x10,
	0x20, 0x40, 0x00, 0x20, 0x00, 0x30, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,
	0x40, 0x10, 0x10, 0x60, 0x10, 0x50, 0x60, 0x30, 0x50, 0x40, 0x10, 0x00,
	0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00,
	0x20, 0x30, 0x00, 0x00, 0x30, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x20, 0x00, 0x00, 0x40,
	0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x30, 0x40, 0x30, 0x20, 0x00, 0x10,
	0x20, 0x30, 0x30, 0x10, 0x50, 0x40, 0x20, 0x30, 0x60, 0x10, 0x40, 0x30,
	0x50, 0x10, 0x60, 0x00, 0x10, 0x20, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10,
	0x40, 0x20, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, 0x30, 0x30, 0x20, 0x20,
	0x10, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x30, 0x00,
	0x10, 0x30, 0x40, 0x00, 0x50, 0x10, 0x00, 0x20, 0x00, 0x50, 0x10, 0x50,
	0x30, 0x10, 0x00, 0x30, 0x40, 0x10, 0x20, 0x30, 0x00, 0x00, 0x40, 0x40,
	0x20, 0x40, 0x60, 0x60, 0x30, 0x40, 0x00, 0x20, 0x60, 0x20, 0x10, 0x30,
	0x40, 0x10, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x10,
	0x30, 0x30, 0x00, 0x20, 0x00, 0x30, 0x10, 0x40, 0x00, 0x20, 0x00, 0x40,
	0x30, 0x10, 0x00, 0x20, 0x10, 0x40, 0x10, 0x00, 0x50, 0x10, 0x10, 0x30,
	0x40, 0x10, 0x10, 0x30, 0x40, 0x50, 0x20, 0x00, 0x10, 0x20, 0x20, 0x20,
	0x20, 0x10, 0x40, 0x30, 0x40, 0x30, 0x10, 0x10, 0x40, 0x30, 0x10, 0x00,
	0x60, 0x10, 0x00, 0x10, 0x00, 0x00, 0x30, 0x30, 0x40, 0x40, 0x10, 0x00,
	0x00, 0x00, 0x10, 0x30, 0x10, 0x10, 0x20, 0x30, 0x00, 0x20, 0x40, 0x40,
	0x00, 0x10, 0x00, 0x40, 0x30, 0x10, 0x60, 0x00, 0x20, 0x20, 0x40, 0x00,
	0x10, 0x50, 0x40, 0x20, 0x30, 0x20, 0x40, 0x30, 0x20, 0x20, 0x60, 0x30,
	0x10, 0x00, 0x20, 0x10, 0x50, 0x30, 0x10, 0x00, 0x20, 0x50, 0x20, 0x30,
	0x60, 0x30, 0x40, 0x50, 0x50, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40,
	0x30, 0x50, 0x00, 0x30, 0x20, 0x30, 0x20, 0x30, 0x40, 0x20, 0x10, 0x20,
	0x30, 0x10, 0x60, 0x50, 0x00, 0x30, 0x00, 0x30, 0x20, 0x40, 0x10, 0x20,
	0x00, 0x20, 0x00, 0x10, 0x00, 0x50, 0x10, 0x70, 0x00, 0x60, 0x40, 0x10,
	0x30, 0x20, 0x20, 0x30, 0x60, 0x00, 0x20, 0x20, 0x00, 0x30, 0x20, 0x20,
	0x50, 0x60, 0x40, 0x60, 0x40, 0x40, 0x50, 0x60, 0x40, 0x50, 0x10, 0x50,
	0x30, 0x50, 0x50, 0x10, 0x00, 0x40, 0x00, 0x20, 0x70, 0x00, 0x30, 0x30,
	0x30, 0x30, 0x70, 0x50, 0x60, 0x30, 0x50, 0x50, 0x50, 0x60, 0x40, 0x60,
	0x40, 0x30, 0x80, 0x00, 0x60, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00,
	0x70, 0x30, 0x60, 0x20, 0x50, 0x30, 0x40, 0x40, 0x30, 0x40, 0x10, 0x30,
	0x20, 0x30, 0x30, 0x80, 0x30, 0x10, 0x20, 0x40, 0x40, 0x20, 0x60, 0x50,
	0x60, 0x50, 0x60, 0x20, 0x10, 0x50, 0x40, 0x00, 0x20, 0x10, 0x20, 0x40,
	0x00, 0x30, 0x20, 0x10, 0x70, 0x40, 0x70, 0x50, 0x60, 0x60, 0x60, 0x50,
	0x60, 0x60, 0x60, 0x40, 0x20, 0x20, 0x00, 0x00, 0x60, 0x00, 0x80, 0x20,
	0x00, 0x00, 0x40, 0x00, 0x10, 0x10, 0x70, 0x60, 0x70, 0x20, 0x20, 0x40,
	0x40, 0x50, 0x40, 0x30, 0x30, 0x20, 0x80, 0x10, 0x20, 0x40, 0x40, 0x30,
	0x50, 0x60, 0x70, 0x20, 0x50, 0x70, 0x50, 0x60, 0x10, 0x40, 0x00, 0x00,
	0x60, 0x30, 0x40, 0x10, 0x50, 0x80, 0x60, 0x40, 0x30, 0x20, 0x40, 0x60,
	0x60, 0x70, 0x40, 0x60, 0x50, 0x60, 0x70, 0x50, 0x70, 0x20, 0x00, 0x70,
	0x00, 0x00, 0x20, 0x80, 0x20, 0x30, 0x40, 0x10, 0x10, 0x40, 0x10, 0x70,
	0x50, 0x30, 0x60, 0x60, 0x40, 0x40, 0x40, 0xA0, 0x30, 0x50, 0x50, 0x50,
	0x80, 0x40, 0x30, 0x50, 0x40, 0x60, 0x30, 0x60, 0x40, 0x40, 0x70, 0x60,
	0x30, 0x40, 0x10, 0x60, 0x10, 0x30, 0x60, 0xA0, 0x50, 0x10, 0x80, 0x30,
	0x60, 0x40, 0x60, 0x90, 0x40, 0x70, 0x40, 0x70, 0x50, 0x20, 0x70, 0x00,
	0x80, 0x30, 0x80, 0x70, 0x10, 0x00, 0x10, 0x20, 0x20, 0x40, 0x00, 0x90,
	0x20, 0x30, 0x20, 0x60, 0x20, 0x00, 0x30, 0x50, 0x60, 0x40, 0x80, 0x30,
	0x40, 0xB0, 0x70, 0x60, 0x20, 0x90, 0x20, 0x40, 0x60, 0x40, 0x60, 0x60,
	0x40, 0x40, 0x40, 0x20, 0x20, 0x30, 0x60, 0x50, 0x40, 0x10, 0x20, 0xA0,
	0xA0, 0x60, 0x30, 0x20, 0x50, 0x60, 0x70, 0x10, 0x60, 0x40, 0x70, 0x50,
	0x10, 0x30, 0x60, 0x40, 0x80, 0x60, 0x80, 0x80, 0x10, 0x60, 0x30, 0x30,
	0x70, 0x40, 0x90, 0x70, 0x10, 0x90, 0x60, 0x50, 0x30, 0x90, 0x10, 0x70,
	0x50, 0x50, 0x70, 0x40, 0x80, 0x20, 0x40, 0x70, 0x40, 0x60, 0x30, 0x60,
	0x60, 0x40, 0x60, 0x60, 0x50, 0x50, 0x50, 0x30, 0x30, 0x30, 0x00, 0x50,
	0x50, 0x30, 0x40, 0x20, 0x30, 0x20, 0xA0, 0x20, 0x20, 0x50, 0x90, 0x30,
	0x20, 0x50, 0x50, 0x60, 0x40, 0x30, 0x30, 0x50, 0x40, 0x60, 0x60, 0x70,
	0x10, 0x70, 0x10, 0x30, 0x30, 0x30, 0x50, 0x70, 0x40, 0x50, 0x80, 0x60,
	0x80, 0x60, 0x90, 0x50, 0x50, 0x70, 0x70, 0x50, 0x60, 0x40, 0x40, 0x20,
	0x50, 0x60, 0x50, 0x60, 0x50, 0x50, 0x60, 0x80, 0x60, 0x60, 0x90, 0x40,
	0x70, 0x10, 0x70, 0x50, 0x60, 0x40, 0x50, 0x70, 0x40, 0x60, 0x20, 0x10,
	0x20, 0xA0, 0x70, 0x30, 0x30, 0x30, 0x50, 0x60, 0x60, 0x60, 0x50, 0x30,
	0x30, 0x00, 0x70, 0x30, 0x60, 0x20, 0x40, 0x20, 0x90, 0x30, 0x30, 0x70,
	0x60, 0x50, 0x60, 0x80, 0x80, 0x40, 0x90, 0x80, 0x80, 0x50, 0x80, 0x70,
	0x40, 0x70, 0x30, 0x80, 0x40, 0x90, 0x50, 0x60, 0x60, 0x30, 0x50, 0x60,
	0x80, 0x50, 0x60, 0xA0, 0xA0, 0x50, 0x10, 0x70, 0x20, 0x50, 0x40, 0x90,
	0x70, 0x70, 0x20, 0x70, 0x20, 0x50, 0x70, 0x60, 0x80, 0x40, 0x40, 0x50,
	0x80, 0x70, 0x20, 0x70, 0x60, 0x00, 0x50, 0x60, 0x90, 0x80, 0x40, 0x20,
	0x40, 0x60, 0x90, 0x50, 0x60, 0x60, 0x90, 0x90, 0x90, 0x60, 0x70, 0x90,
	0x90, 0x70, 0x90, 0x50, 0x50, 0x80, 0x50, 0x70, 0x50, 0x60, 0x50, 0x50,
	0x60, 0x50, 0x60, 0x50, 0x60, 0x90, 0x70, 0x90, 0x90, 0x50, 0xA0, 0x30,
	0x20, 0x40, 0x50, 0xA0, 0x70, 0x50, 0x80, 0x30, 0x50, 0x40, 0x70, 0x60,
	0x50, 0x80, 0x60, 0x40, 0x70, 0x70, 0x20, 0x80, 0x20, 0x80, 0x90, 0x90,
	0x90, 0x70, 0x80, 0x30, 0x40, 0x80, 0x60, 0x90, 0xA0, 0x60, 0x50, 0x90,
	0x50, 0x70, 0x60, 0x80, 0x60, 0x80, 0x80, 0x70, 0xA0, 0x50, 0x60, 0x80,
	0x90, 0x50, 0x40, 0x80, 0x70, 0x60, 0x60, 0x60, 0x70, 0x90, 0x30, 0xA0,
	0x70, 0x70, 0x50, 0x50, 0x40, 0x60, 0x60, 0x30, 0x50, 0xA0, 0x70, 0x80,
	0x30, 0x30, 0x60, 0x50, 0x30, 0x70, 0x80, 0x70, 0x80, 0x80, 0x80, 0x80,
	0x60, 0xA0, 0x70, 0x80, 0x60, 0x90, 0x70, 0x40, 0x50, 0x50, 0x90, 0x50,
	0x70, 0xA0, 0x80, 0x70, 0x50, 0xA0, 0x80, 0x90, 0x70, 0x60, 0x90, 0x60,
	0x50, 0x80, 0x40, 0x70, 0x80, 0x90, 0x40, 0x70, 0x50, 0x50, 0x80, 0x70,
	0x70, 0x80, 0xA0, 0x90, 0xA0, 0x80, 0x80, 0x80, 0x50, 0x70, 0x70, 0x60,
	0x80, 0x70, 0x60, 0xB0, 0x70, 0x40, 0x60, 0x60, 0x20, 0x50, 0x40, 0x70,
	0x60, 0x80, 0x70, 0x80, 0x50, 0x70, 0x70, 0xA0, 0x70, 0x80, 0x60, 0x70,
	0x60, 0x60, 0x70, 0x50, 0x90, 0x60, 0x60, 0xA0, 0x70, 0x70, 0x50, 0x70,
	0x90, 0x60, 0x90, 0xA0, 0x80, 0x70, 0x90, 0x50, 0x60, 0xA0, 0x80, 0x60,
	0x50, 0x60, 0x90, 0x80, 0x80, 0x70, 0xB0, 0x70, 0x90, 0x80, 0x60, 0x90,
	0x90, 0x50, 0x50, 0x70, 0x50, 0x80, 0x60, 0x80, 0x60, 0x60, 0x80, 0x60,
	0x80, 0x30, 0x70, 0x90, 0x80, 0x70, 0x70, 0x80, 0x60, 0x90, 0x80, 0x70,
	0x50, 0x80, 0x70, 0x80, 0x70, 0x70, 0x60, 0x60, 0x60, 0x70, 0x90, 0x60,
	0x60, 0x70, 0x70, 0x80, 0x60, 0xA0, 0x80, 0x70, 0xB0, 0x70, 0x70, 0x90,
	0x80, 0x70, 0x80, 0x60, 0x80, 0xA0, 0x90, 0x90, 0x80, 0x70, 0xC0, 0x90,
	0x80, 0x90, 0x90, 0x90, 0x70, 0x60, 0x60, 0x60, 0x60, 0x80, 0xB0, 0x90,
	0x50, 0x80, 0x80, 0x90, 0x80, 0x80, 0x80, 0x30, 0x60, 0x90, 0x80, 0x60,
	0x80, 0xA0, 0x80, 0x70, 0x70, 0x80, 0x50, 0x90, 0x60, 0x80, 0x70, 0x80,
	0x80, 0x80, 0x60, 0x70, 0x70, 0x80, 0x80, 0x80, 0xB0, 0x90, 0xA0, 0x70,
	0x90, 0x80, 0x90, 0x90, 0xB0, 0xA0, 0xB0, 0x70, 0xA0, 0xA0, 0x80, 0x90,
	0xA0, 0x90, 0x70, 0x80, 0x70, 0x90, 0x90, 0x90, 0x90, 0x70, 0x70, 0x60,
	0x70, 0x70, 0xD0, 0x80, 0x80, 0xA0, 0x80, 0x90, 0xA0, 0x90, 0x80, 0x50,
	0x90, 0x70, 0x80, 0x70, 0x80, 0xA0, 0xC0, 0x60, 0xB0, 0x60, 0x80, 0x80,
	0x70, 0xA0, 0x70, 0x90, 0x80, 0x60, 0x80, 0x80, 0x70, 0x90, 0x90, 0xB0,
	0x80, 0xA0, 0xA0, 0xB0, 0x80, 0x90, 0x70, 0xB0, 0xC0, 0x80, 0x80, 0xB0,
	0xA0, 0x80, 0xA0, 0xA0, 0x90, 0xB0, 0xC0, 0x80, 0x80, 0x90, 0x80, 0xA0,
	0x70, 0xE0, 0x80, 0x80, 0x70, 0xA0, 0x80, 0xD0, 0x90, 0x70, 0xA0, 0x90,
	0x90, 0xA0, 0xA0, 0x80, 0x80, 0x90, 0x90, 0x70, 0xA0, 0x90, 0x80, 0x90,
	0xD0, 0x80, 0x90, 0x80, 0x90, 0x80, 0x80, 0xA0, 0x90, 0xA0, 0x90, 0x70,
	0x80, 0x90, 0xB0, 0x90, 0x90, 0xB0, 0xB0, 0xB0, 0x60, 0xB0, 0x80, 0xA0,
	0x90, 0xC0, 0x80, 0x80, 0xB0, 0xB0, 0xA0, 0x80, 0xB0, 0xA0, 0xD0, 0x90,
	0xB0, 0x90, 0x90, 0x90, 0xA0, 0xA0, 0x90, 0x80, 0x80, 0x90, 0x90, 0xB0,
	0x70, 0xB0, 0xA0, 0xC0, 0xA0, 0xA0, 0xB0, 0x90, 0x90, 0xA0, 0x90, 0x90,
	0x80, 0x70, 0xA0, 0x70, 0x90, 0xA0, 0x80, 0xA0, 0x90, 0xA0, 0x80, 0x90,
	0xA0, 0xA0, 0xB0, 0xA0, 0xB0, 0xB0, 0x90, 0xB0, 0xC0, 0xA0, 0x90, 0xC0,
	0xA0, 0x80, 0x70, 0xB0, 0x90, 0x90, 0xA0, 0x90, 0x90, 0xB0, 0xC0, 0xB0,
	0xA0, 0xC0, 0xB0, 0xA0, 0x70, 0xA0, 0x80, 0xE0, 0xA0, 0xE0, 0xA0, 0x90,
	0xA0, 0x80, 0x90, 0x70, 0xC0, 0xD0, 0xB0, 0xA0, 0x90, 0xA0, 0xC0, 0xA0,
	0xA0, 0xB0, 0x80, 0xA0, 0x80, 0x80, 0xA0, 0xB0, 0xB0, 0x80, 0x90, 0x90,
	0x90, 0x90, 0xB0, 0xA0, 0xA0, 0xA0, 0x80, 0xB0, 0xB0, 0xB0, 0x90, 0xC0,
	0xB0, 0x80, 0xA0, 0xC0, 0x90, 0x90, 0xD0, 0xA0, 0xA0, 0xB0, 0xA0, 0xB0,
	0xA0, 0xA0, 0xC0, 0xB0, 0x90, 0xA0, 0xB0, 0xC0, 0xA0, 0x90, 0x80, 0xA0,
	0xB0, 0xC0, 0xA0, 0xB0, 0xA0, 0x90, 0x80, 0xB0, 0xD0, 0x90, 0xC0, 0xB0,
	0xA0, 0xB0, 0xB0, 0xC0, 0xA0, 0xA0, 0xB0, 0xF0, 0x90, 0xA0, 0x80, 0xB0,
	0xB0, 0x90, 0xC0, 0x90, 0x90, 0xA0, 0xA0, 0xA0, 0x90, 0xA0, 0xB0, 0xB0,
	0xB0, 0xB0, 0xB0, 0xC0, 0xB0, 0xA0, 0x90, 0x90, 0xB0, 0xA0, 0x90, 0x90,
	0xC0, 0xB0, 0xC0, 0xC0, 0xB0, 0xB0, 0xB0, 0xD0, 0xA0, 0xA0, 0xC0, 0xA0,
	0x90, 0x90, 0xB0, 0xA0, 0xC0, 0x90, 0xA0, 0xB0, 0xA0, 0x90, 0xA0, 0x90,
	0xE0, 0xD0, 0xA0, 0x90, 0xA0, 0xC0, 0xC0, 0xC0, 0xB0, 0xA0, 0xC0, 0xA0,
	0xC0, 0xB0, 0xC0, 0x90, 0x80, 0xC0, 0xC0, 0xA0, 0xA0, 0xB0, 0xC0, 0x90,
	0x90, 0xB0, 0xA0, 0xB0, 0xC0, 0xB0, 0xC0, 0x90, 0xE0, 0xC0, 0xA0, 0xE0,
	0xB0, 0xB0, 0xE0, 0xD0, 0xB0, 0xB0, 0xB0, 0xB0, 0xD0, 0xD0, 0xC0, 0xD0,
	0xD0, 0xC0, 0xB0, 0xB0, 0xA0, 0xA0, 0xA0, 0xB0, 0xE0, 0xB0, 0xC0, 0xA0,
	0x90, 0x90, 0xD0, 0xB0, 0xA0, 0xB0, 0xE0, 0xE0, 0xD0, 0xB0, 0xA0, 0xD0,
	0xA0, 0xF0, 0xE0, 0xC0, 0xF0, 0xB0, 0xC0, 0xC0, 0xB0, 0xB0, 0xB0, 0xC0,
	0xC0, 0xB0, 0xB0, 0xA0, 0xF0, 0xF0, 0xD0, 0xB0, 0xC0, 0xC0, 0xB0, 0xD0,
	0xC0, 0xB0, 0xC0, 0xD0, 0xC0, 0xC0, 0xC0, 0xB0, 0xB0, 0xC0, 0x90, 0xE0,
	0xC0, 0xD0, 0xD0, 0xD0, 0xC0, 0xC0, 0xC0, 0xF0, 0xC0, 0xE0, 0xB0, 0x90,
	0xD0, 0xE0, 0xD0, 0xC0, 0xD0, 0xA0, 0xC0, 0xB0, 0xC0, 0xB0, 0xC0, 0xC0,
	0xE0, 0xB0, 0xB0, 0xB0, 0xC0, 0xB0, 0xE0, 0xB0, 0xD0, 0xC0, 0xC0, 0xC0,
	0xE0, 0xB0, 0xB0, 0xC0, 0xE0, 0xD0, 0xC0, 0xD0, 0xB0, 0xF0, 0xE0, 0xC0,
	0xF0, 0xD0, 0xB0, 0xB0, 0xC0, 0xE0, 0xC0, 0xC0, 0xE0, 0xC0, 0xD0, 0xA0,
	0xD0, 0xC0, 0xC0, 0xC0, 0xE0, 0xD0, 0xD0, 0xC0, 0xE0, 0xC0, 0xF0, 0xE0,
	0xD0, 0xE0, 0xF0, 0xF0, 0xC0, 0xB0, 0xC0, 0xC0, 0xC0, 0xD0, 0xC0, 0xC0,
	0xB0, 0xD0, 0xB0, 0xD0, 0xE0, 0xF0, 0xE0, 0xC0, 0xB0, 0xD0, 0xB0, 0xC0,
	0xC0, 0xC0, 0xC0, 0xB0, 0xF0, 0xD0, 0xE0, 0xC0, 0xD0, 0xC0, 0xC0, 0xE0,
	0xE0, 0xD0, 0xE0, 0xE0, 0xF0, 0xE0, 0xD0, 0xB0, 0xF0, 0xE0, 0xE0, 0xB0,
	0xE0, 0xD0, 0xD0, 0xC0, 0xE0, 0xB0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0,
	0xD0, 0xC0, 0xD0, 0xF0, 0xE0, 0xE0, 0xE0, 0xD0, 0xD0, 0xF0, 0xC0, 0xC0,
	0xD0, 0xC0, 0xD0, 0xE0, 0xD0, 0xC0, 0xF0, 0xC0, 0xF0, 0xF0, 0xF0, 0xD0,
	0xD0, 0xC0, 0xD0, 0xC0, 0xD0, 0xC0, 0xF0, 0xE0, 0xC0, 0xF0, 0xE0, 0xD0,
	0xF0, 0xC0, 0xD0, 0xE0, 0xE0, 0xF0, 0xC0, 0xE0, 0xF0, 0xD0, 0xD0, 0xE0,
	0xE0, 0xF0, 0xE0, 0xF0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xF0, 0xD0, 0xD0,
	0xC0, 0xE0, 0xD0, 0xE0, 0xD0, 0xD0, 0xE0, 0xD0, 0xE0, 0xE0, 0xF0, 0xE0,
	0xF0, 0xD0, 0xC0, 0xC0, 0xC0, 0xC0, 0xD0, 0xF0, 0xE0, 0xC0, 0xF0, 0xD0,
	0xE0, 0xF0, 0xF0, 0xC0, 0xC0, 0xC0, 0xE0, 0xC0, 0xE0, 0xD0, 0xF0, 0xD0,
	0xE0, 0xD0, 0xE0, 0xE0, 0xD0, 0xD0, 0xE0, 0xE0, 0xE0, 0xD0, 0xD0, 0xD0,
	0xF0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0xD0, 0xF0, 0xF0, 0xD0, 0xE0,
	0xF0, 0xF0, 0xD0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xE0, 0xE0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xD0, 0xF0, 0xF0, 0xD0, 0xE0, 0xE0, 0xE0,
	0xD0, 0xE0, 0xF0, 0xE0, 0xF0, 0xD0, 0xF0, 0xE0, 0xE0, 0xD0, 0xE0, 0xE0,
	0xD0, 0xE0, 0xE0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0xE0,
	0xE0, 0xE0, 0xE0, 0xF0, 0xE0, 0xF0, 0xF0, 0xE0, 0xF0, 0xE0, 0xF0, 0xF0,
	0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xE0, 0xF0, 0xE0, 0xE0,
	0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0xF0, 0xF0,
	0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0,
	0xE0, 0xE0, 0xE0, 0xF0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xF0, 0xF0, 0xF0, 0xF0
};

#define MAKERGB(r,g,b)		DWORD(((r)<<16)|((g)<<8)|(b))
#define MAKEARGB(a,r,g,b)	DWORD(((a)<<24)|((r)<<16)|((g)<<8)|(b))

int thunderCounter = 180;
int lightningCounter = 0;
int thundertic = 1;
static unsigned short CloudOffsetY = 0;
static unsigned short CloudOffsetX = 0;

#define TRUEANGLES(x) (((x) >> ANGLETOFINESHIFT) * 360.0f / FINEANGLES)
#define SKYVIEWPOS(angle, amount, x) x = -(angle / (float)ANG90 * amount); while(x < 1.0f) x += 1.0f
#define dcos(angle) finecosine[(angle) >> ANGLETOFINESHIFT]
#define dsin(angle) finesine[(angle) >> ANGLETOFINESHIFT]

int FIRESKY_WIDTH = 64;
int FIRESKY_HEIGHT = 64;

bool skyfadeback = false;
int logoAlpha = 0;

typedef struct
{
    byte r;
    byte g;
    byte b;
    byte a;

	void SetRGBA(byte rr, byte gg, byte bb, byte aa) 
	{ 
		r = bb;
		g = gg;
		b = rr;
		a = aa;
	}
} dPalette_t;

static int firetexture[64 * 64];
static int firetexture2[64 * 128];
byte*      fireBuffer;
//byte*       ;
unsigned char fireBuffer2[8192];
dPalette_t  firePal16[256];
dPalette_t  firePal256[256];
int         fireLump = -1;

byte rndtable[256] = {
    0,   8, 109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66 ,
    74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36 ,
    95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188 ,
    52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224 ,
    149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242 ,
    145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0 ,
    175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235 ,
    25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113 ,
    94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75 ,
    136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196 ,
    135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113 ,
    80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241 ,
    24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224 ,
    145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95 ,
    28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226 ,
    71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36 ,
    17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106 ,
    197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136 ,
    120, 163, 236, 249
};

int	fndindex = 0;//Fire Rand Index PSX
int	rndindex = 0;
int prndindex = 0;

int P_Random_(void)
{
	prndindex = (prndindex+1)&0xff;
	return rndtable[prndindex];
}

int M_Random_(void)
{
	rndindex = (rndindex+1)&0xff;
	return rndtable[rndindex];
}

void M_ClearRandom_(void)
{
	rndindex = prndindex = 0;
}

void glSetView(int fieldofview)//[GEC]
{
	// I stopped using BaseRatioSizes here because the information there wasn't well presented.
	//							4:3				16:9		16:10		17:10		5:4
	static float ratios[]={1.333333f, 1.777777f, 1.6f, 1.7f, 1.25f};

	// now render the main view
	float fovratio;
	float ratio;

	ratio = ratios[WidescreenRatio];
	
	if (!(WidescreenRatio&4))
	{
		fovratio = 1.333333f;
	}
	else
	{
		fovratio = ratio;
	}

	GLRenderer->SetProjection(fieldofview * 360.0f / FINEANGLES, ratio, fovratio);
}

//
// R_CloudThunder
// Loosely based on subroutine at 0x80026418
//

static void R_CloudThunder(void)
{
    if(!(gametic & ((thunderCounter & 1) ? 1 : 3)))
	{
        return;
    }

    if((thunderCounter - thundertic) > 0)
	{
        thunderCounter = (thunderCounter - thundertic);
        return;
    }

    if(lightningCounter == 0)
	{
		char* thunder[2]={"world/thunder1","world/thunder2"};
		//S_Sound (CHAN_AUTO, "world/thunder", 1.0, ATTN_NONE);
		S_Sound (CHAN_AUTO, thunder[(M_Random_() & 1)], 1.0, ATTN_NONE);
        thundertic = (1 + (M_Random_() & 1));
    }

    if(!(lightningCounter < 6)) // Reset loop after 6 lightning flickers
	{  
        int rand = (M_Random_() & 7);
        thunderCounter = (((rand << 4) - rand) << 2) + 60;
        lightningCounter = 0;
        return;
    }

    if((lightningCounter & 1) == 0) 
	{
		sky->lowcolor += 0x111100;
		sky->highcolor += 0x111100;
    }
    else 
	{
		sky->lowcolor -= 0x111100;
		sky->highcolor -= 0x111100;
    }

    thunderCounter = (M_Random_() & 7) + 1;    // Do short delay loops for lightning flickers
    lightningCounter++;
}


//
// R_CloudTicker
//

static void R_CloudTicker(void) 
{
    CloudOffsetX -= (dcos(viewangle) >> 10)/2;
    CloudOffsetY += (dsin(viewangle) >> 9)/2;

    if(sky->flags & SKFS_THUNDER)
	{
        R_CloudThunder();
    }
}

//
// R_DrawClouds
//

static void R_DrawClouds(int CM_Index, float offset)
{
	FMaterial * tex = FMaterial::ValidateTexture(sky->faces[0]);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	float pos = 0.0f;

	pos = (TRUEANGLES(viewangle) / 360.0f) * 2.0f;

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glColor4ub(sky->basecolor>>16,sky->basecolor>>8,sky->basecolor,0x90);

	float off = offset == 0 ? 0:(offset+0.4400f);
	float v0[5]={(-653.6)-108.8, (128.0)-off  ,(-163.95), (FIXED2FLOAT(CloudOffsetX) - pos)		    *2, FIXED2FLOAT(CloudOffsetY)};
	float v1[5]={( 653.6)-108.8, (128.0)-off  ,(-163.95), ((FIXED2FLOAT(CloudOffsetX) + 1.5f) - pos)*2, FIXED2FLOAT(CloudOffsetY)};
	float v2[5]={(-653.6)-108.8, (0.0)-(off*2),(-326.8) , (FIXED2FLOAT(CloudOffsetX) - pos)		    *2, FIXED2FLOAT(CloudOffsetY) + 2.0f};
	float v3[5]={( 653.6)-108.8, (0.0)-(off*2),(-326.8) , ((FIXED2FLOAT(CloudOffsetX) + 1.5f) - pos)*2, FIXED2FLOAT(CloudOffsetY) + 2.0f};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(0.0f, 0.0f, 0.0f);

    glBegin(GL_TRIANGLE_STRIP);
	glTexCoord2f(v0[3], v0[4]);
	glVertex3f(v0[0], v0[1], v0[2]);
	glTexCoord2f(v1[3], v1[4]);
	glVertex3f(v1[0], v1[1], v1[2]);
	glTexCoord2f(v2[3], v2[4]);
	glVertex3f(v2[0], v2[1], v2[2]);
	glTexCoord2f(v3[3], v3[4]);
	glVertex3f(v3[0], v3[1], v3[2]);
	glEnd();

	//FADE Layer
	gl_RenderState.BlendEquation(GL_FUNC_ADD);
	gl_RenderState.BlendFunc(GL_SRC_ALPHA, GL_ONE);
	gl_RenderState.SetTextureMode(TM_MASK);
	gl_RenderState.Apply();

	glBegin(GL_TRIANGLE_STRIP);
	glColor4ub(sky->highcolor>>16,sky->highcolor>>8,sky->highcolor,0xff);
	glTexCoord2f(v0[3], v0[4]);
	glVertex3f(v0[0], v0[1], v0[2]);
	glTexCoord2f(v1[3], v1[4]);
	glVertex3f(v1[0], v1[1], v1[2]);
	glColor4ub(sky->lowcolor>>16,sky->lowcolor>>8,sky->lowcolor,0xff);
	glTexCoord2f(v2[3], v2[4]);
	glVertex3f(v2[0], v2[1], v2[2]);
	glTexCoord2f(v3[3], v3[4]);
	glVertex3f(v3[0], v3[1], v3[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]

	gl_RenderState.BlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	gl_RenderState.SetTextureMode(TM_MODULATE);
	gl_RenderState.Apply();
}

//
// R_DrawSimpleSky_N64
//

static void R_DrawSimpleSky_N64(int CM_Index,int skypicnum,float offset)
{
	FMaterial * tex = FMaterial::ValidateTexture(sky->faces[skypicnum]);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	float pos1;
    int height = tex->GetHeight(GLUSE_TEXTURE);
    int lumpheight = tex->GetHeight(GLUSE_TEXTURE);

	SKYVIEWPOS(viewangle, 1, pos1);

	float width = (float)640 / (float)tex->GetWidth(GLUSE_TEXTURE);
    float row = (float)lumpheight / (float)height;

	float x = -(float)tex->GetWidth(GLUSE_TEXTURE);
	float y = (float)-offset; 
	int width2 = 640; 
	int height2 = lumpheight;
    float u1 = pos1;	
	float u2 = width + pos1;
	float v1 = 0.006f;	
	float v2 = row; 

    float left = x;
    float right = left + width2;
    float bottom = y;
    float top = bottom + height2;

	float v00[5]={ left , top   , (0.0f), u1, v1};
	float v01[5]={ right, top   , (0.0f), u2, v1};
	float v02[5]={ left , bottom, (0.0f), u1, v2};
	float v03[5]={ right, bottom, (0.0f), u2, v2};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(-160.0f, 120.0f, -160.0f);

	glColor4f(1.0f,1.0f,1.0f,1.0f);
	glBegin(GL_TRIANGLE_STRIP);
	glTexCoord2f(v00[3], v00[4]);
	glVertex3f(v00[0], v00[1], v00[2]);
	glTexCoord2f(v01[3], v01[4]);
	glVertex3f(v01[0], v01[1], v01[2]);
	glTexCoord2f(v02[3], v02[4]);
	glVertex3f(v02[0], v02[1], v02[2]);
	glTexCoord2f(v03[3], v03[4]);
	glVertex3f(v03[0], v03[1], v03[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]
}

//
// R_TitleSkyTicker
//

static void R_TitleSkyTicker(void)
{
    if(skyfadeback == true)
	{
		if(logoAlpha == 0xff)
			logoAlpha = 0x00;

        logoAlpha += 8;
        if(logoAlpha > 0xff)
		{
            logoAlpha = 0xff;
            skyfadeback = false;
        }
    }
}

//
// R_DrawTitleSky
//

static void R_DrawTitleSky(int CM_Index, float offset) 
{
	R_DrawSimpleSky_N64(CM_Index,0,240+offset);

	FMaterial * tex = FMaterial::ValidateTexture(sky->faces[1]);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	glEnable(GL_BLEND);
	gl_RenderState.Apply();

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);

	float x = 63; 
	float y = 25-offset; 
	int width = tex->GetWidth(GLUSE_TEXTURE); 
	int height = tex->GetHeight(GLUSE_TEXTURE);
    float u1 = 0;	
	float u2 = 1.0;
	float v1 = 0;	
	float v2 = 1.0; 

    float left = x;
    float right = left + width;
    float bottom = y;
    float top = bottom + height;

	float v00[5]={ left , top   , (0.0f), u1, v1};
	float v01[5]={ right, top   , (0.0f), u2, v1};
	float v02[5]={ left , bottom, (0.0f), u1, v2};
	float v03[5]={ right, bottom, (0.0f), u2, v2};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(-160.0f, -122.0f, -160.0f);

	int c = MAKEARGB(logoAlpha,255, 255, 255);
	glColor4ubv((byte*)&c);

	glBegin(GL_TRIANGLE_STRIP);
	glTexCoord2f(v00[3], v00[4]);
	glVertex3f(v00[0], v00[1], v00[2]);
	glTexCoord2f(v01[3], v01[4]);
	glVertex3f(v01[0], v01[1], v01[2]);
	glTexCoord2f(v02[3], v02[4]);
	glVertex3f(v02[0], v02[1], v02[2]);
	glTexCoord2f(v03[3], v03[4]);
	glVertex3f(v03[0], v03[1], v03[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]
}

//
// R_SpreadFireD64
//

static void R_SpreadFireD64(byte* src1, byte* src2, int pixel, int counter, int* rand) {
    int randIdx = 0;
    byte *tmpSrc;

    if(pixel != 0) {
        randIdx = rndtable[*rand];
        *rand = ((*rand+2) & 0xff);

        tmpSrc = (src1 + (((counter - (randIdx & 3)) + 1) & (FIRESKY_WIDTH-1)));
        *(byte*)(tmpSrc - FIRESKY_WIDTH) = pixel - ((randIdx & 1));
    }
    else {
        *(byte*)(src2 - FIRESKY_WIDTH) = 0;
    }
}

//
// R_FireD64
//

static void R_FireD64(byte *buffer)
{
    int counter = 0;
    int rand = 0;
    int step = 0;
    int pixel = 0;
    byte *src;
    byte *srcoffset;

    rand = (M_Random_() & 0xff);
    src = buffer;
    counter = 0;
    src += FIRESKY_WIDTH;

    do {  // width
        srcoffset = (src + counter);
        pixel = *(byte*)srcoffset;

        step = 2;

        R_SpreadFireD64(src, srcoffset, pixel, counter, &rand);

        src += FIRESKY_WIDTH;
        srcoffset += FIRESKY_WIDTH;

        do {  // height
            pixel = *(byte*)srcoffset;
            step += 2;

            R_SpreadFireD64(src, srcoffset, pixel, counter, &rand);

            pixel = *(byte*)(srcoffset + FIRESKY_WIDTH);
            src += FIRESKY_WIDTH;
            srcoffset += FIRESKY_WIDTH;

            R_SpreadFireD64(src, srcoffset, pixel, counter, &rand);

            src += FIRESKY_WIDTH;
            srcoffset += FIRESKY_WIDTH;

        }
        while(step < FIRESKY_HEIGHT);

        counter++;
        src -= ((FIRESKY_WIDTH*FIRESKY_HEIGHT)-FIRESKY_WIDTH);

    }
    while(counter < FIRESKY_WIDTH);
}

//
// R_InitFireD64
//

void R_InitFireD64(void)
{
    int i;

    memset(&firePal16, 0, sizeof(dPalette_t)*256);

    for(i = 0; i < 16; i++)
	{
        firePal16[i].r = 16 * i;
        firePal16[i].g = 16 * i;
        firePal16[i].b = 16 * i;
        firePal16[i].a = 0xff;
    }

	//fireBuffer = FIRE64x64;

	fireBuffer = (unsigned char*)malloc(4096);
	for(i = 0; i < 4096; i++)
	{
        fireBuffer[i] = FIRE64x64[i];
    }

    for(i = 0; i < 4096; i++)
	{
        fireBuffer[i] >>= 4;
    }
}

//
// R_FireD64Ticker
//

static void R_FireD64Ticker(void)
{
    if(level.time & 1)
	{
        R_FireD64(fireBuffer);
    }
}

//
// R_DrawFireD64
//

static void R_DrawFireD64(float offset)
{
    int i;
    //
    // copy fire pixel data to texture data array
    //
    memset(firetexture, 0, sizeof(int) * FIRESKY_WIDTH * FIRESKY_HEIGHT);
    for(i = 0; i < FIRESKY_WIDTH * FIRESKY_HEIGHT; i++)
	{
        byte rgb[3];

        rgb[0] = firePal16[fireBuffer[i]].r;
        rgb[1] = firePal16[fireBuffer[i]].g;
        rgb[2] = firePal16[fireBuffer[i]].b;

		firetexture[i] =  MAKEARGB(0xff,rgb[0], rgb[1], rgb[2]);
    }

	FHardwareTexture *firetex;
	firetex = new FHardwareTexture(64, 64, false, false, false, true);
	firetex->CreateTexture(NULL, 64, 64, false, 0, CM_DEFAULT);
	glFlush();
	firetex->Bind(0, CM_DEFAULT);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    glTexSubImage2D(GL_TEXTURE_2D,0,0,0,FIRESKY_WIDTH,FIRESKY_HEIGHT,GL_RGBA,GL_UNSIGNED_BYTE,firetexture);

	float pos1;

	SKYVIEWPOS(viewangle, 4, pos1);

	float x = -64;
	float y = 120-offset; 
	int width = 640; 
	int height = 120;
    float u1 = pos1;	
	float u2 = 10.0f + pos1;
	float v1 = 0.0035f;	
	float v2 = 1.0f; 

    float left = x;
    float right = left + width;
    float bottom = y;
    float top = bottom + height;

	float v00[5]={ left , top   , (0.0f), u1, v1};
	float v01[5]={ right, top   , (0.0f), u2, v1};
	float v02[5]={ left , bottom, (0.0f), u1, v2};
	float v03[5]={ right, bottom, (0.0f), u2, v2};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(-160.0f, -120, -160.0f);

	glColor4f(1.0f,1.0f,1.0f,1.0f);
	glBegin(GL_TRIANGLE_STRIP);
	glColor4ub(sky->highcolor>>16,sky->highcolor>>8,sky->highcolor,0xff);
	glTexCoord2f(v00[3], v00[4]);
	glVertex3f(v00[0], v00[1], v00[2]);
	glTexCoord2f(v01[3], v01[4]);
	glVertex3f(v01[0], v01[1], v01[2]);
	glColor4ub(sky->lowcolor>>16,sky->lowcolor>>8,sky->lowcolor,0xff);
	glTexCoord2f(v02[3], v02[4]);
	glVertex3f(v02[0], v02[1], v02[2]);
	glTexCoord2f(v03[3], v03[4]);
	glVertex3f(v03[0], v03[1], v03[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]

	firetex->Clean(true);
}

//
// R_DrawSimpleSky_PSX
//

static void R_DrawSimpleSky_PSX( int CM_Index,int skypicnum,float offset)
{
	FMaterial * tex = FMaterial::ValidateTexture(sky->faces[skypicnum]);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	/*FTexture *tex;
	tex = TexMan("WATER01");
	//tex->Bind(CM_Index);

	gltex = FMaterial::ValidateTexture(tex);
	gltex->BindPatch(CM_Index);*/

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	float pos1;
    int height = tex->GetHeight(GLUSE_TEXTURE);
    int lumpheight = tex->GetHeight(GLUSE_TEXTURE);

	SKYVIEWPOS(viewangle, 1, pos1);

	float width = (float)640 / (float)tex->GetWidth(GLUSE_TEXTURE);
    float row = (float)lumpheight / (float)height;

	float x = -(float)tex->GetWidth(GLUSE_TEXTURE)+16;
	float y = (float)-offset; 
	int width2 = 640; 
	int height2 = lumpheight;
    float u1 = (pos1)+0.250905f;
	float u2 = (width + pos1)-0.24900f;
	float v1 = 0.0f;	
	float v2 = row; 

    float left = x;
    float right = left + width2;
    float bottom = y;
    float top = (bottom + height2)+8.5;

	float v00[5]={ left , top   , (0.0f), u1, v1};
	float v01[5]={ right, top   , (0.0f), u2, v1};
	float v02[5]={ left , bottom, (0.0f), u1, v2};
	float v03[5]={ right, bottom, (0.0f), u2, v2};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(-160.0f, 120.0f, -160.0f);

	glColor4f(1.0f,1.0f,1.0f,1.0f);
	glBegin(GL_TRIANGLE_STRIP);
	glTexCoord2f(v00[3], v00[4]);
	glVertex3f(v00[0], v00[1], v00[2]);
	glTexCoord2f(v01[3], v01[4]);
	glVertex3f(v01[0], v01[1], v01[2]);
	glTexCoord2f(v02[3], v02[4]);
	glVertex3f(v02[0], v02[1], v02[2]);
	glTexCoord2f(v03[3], v03[4]);
	glVertex3f(v03[0], v03[1], v03[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]
}

//
// R_SpreadFirePSX
//

static void R_SpreadFirePSX(byte* src1, byte* src2, int pixel, int counter, int* rand)
{
    int randIdx = 0;
    int randIdx2 = 0;
    byte *tmpSrc;
    
    if(pixel != 0) 
    {
		//[GEC] Like PsxDoom
        randIdx = (rndtable[*rand]);
        randIdx2 = (rndtable[*rand+1]);
        *rand = ((*rand+2) & 0xff);
		fndindex = *rand;
        
        tmpSrc = (src1 + (((counter - (randIdx & 3)) + 1) & (FIRESKY_WIDTH-1)));
        
        *(byte*)(tmpSrc - FIRESKY_WIDTH) = pixel - ((randIdx2 & 1));
    }
    else
    {
        *(byte*)(src2 - FIRESKY_WIDTH) = 0;                                                                                                                      
    }
}

//
// Fire_Out
//

static void Fire_Out(void)
{
	int i;
    for(i = ((FIRESKY_WIDTH * FIRESKY_HEIGHT) - FIRESKY_WIDTH); i < (FIRESKY_WIDTH*FIRESKY_HEIGHT); i++) 
    {
        if(fireBuffer2[i] != 0){fireBuffer2[i] = (fireBuffer2[i] - 0x01);}
    }
}

//
// R_FirePSX
//

int FireFrame = 0;

static void R_FirePSX(byte *buffer)
{
	/*if(FireFrame > 200)
    {
        if(FireFrame > 248){Fire_Out();}
        else if((FireFrame & 1) == 1){Fire_Out();}
    }*/

    int counter = 0;
    int rand = 0;
    int step = 0;
    int pixel = 0;
    byte *src;
    byte *srcoffset;

    rand = 0;
    step = 0;
    pixel = 0;

	FireFrame++;
    rand = fndindex;
    src = buffer;
    counter = 0;
    src += FIRESKY_WIDTH;
    do 
    {  // width
        srcoffset = (src + counter);
        pixel = *(byte*)srcoffset;

        step = 2;

        R_SpreadFirePSX(src, srcoffset, pixel, counter, &rand);

        src += FIRESKY_WIDTH;
        srcoffset += FIRESKY_WIDTH;

        do 
        {  // height
            pixel = *(byte*)srcoffset;
            step += 2;

            R_SpreadFirePSX(src, srcoffset, pixel, counter, &rand);

            pixel = *(byte*)(srcoffset + FIRESKY_WIDTH);
            src += FIRESKY_WIDTH;
            srcoffset += FIRESKY_WIDTH;

            R_SpreadFirePSX(src, srcoffset, pixel, counter, &rand);

            pixel = *(byte*)(srcoffset + FIRESKY_WIDTH);
            src += FIRESKY_WIDTH;
            srcoffset += FIRESKY_WIDTH;
        }
        while(step < FIRESKY_HEIGHT);

        
        counter++;
        src -= ((FIRESKY_WIDTH*FIRESKY_HEIGHT)-FIRESKY_WIDTH);

    }
    while(counter < FIRESKY_WIDTH);
}

//
// R_InitFirePSX
//

void R_InitFirePSX(void)
{
    int i;

    memset(&firePal256, 0, sizeof(dPalette_t)*256);

	firePal256[0x00].SetRGBA(0x00,0x00,0x00,0x00);
	firePal256[0x01].SetRGBA(0x18,0x00,0x00,0xFF);
	firePal256[0x02].SetRGBA(0x29,0x08,0x00,0xFF);
	firePal256[0x03].SetRGBA(0x42,0x08,0x00,0xFF);
	firePal256[0x04].SetRGBA(0x51,0x10,0x00,0xFF);
	firePal256[0x05].SetRGBA(0x63,0x18,0x00,0xFF);
	firePal256[0x06].SetRGBA(0x73,0x18,0x00,0xFF);
	firePal256[0x07].SetRGBA(0x8C,0x21,0x00,0xFF);
	firePal256[0x08].SetRGBA(0x9C,0x29,0x00,0xFF);
	firePal256[0x09].SetRGBA(0xAD,0x39,0x00,0xFF);
	firePal256[0x0A].SetRGBA(0xBD,0x42,0x00,0xFF);
	firePal256[0x0B].SetRGBA(0xC6,0x42,0x00,0xFF);
	firePal256[0x0C].SetRGBA(0xDE,0x4A,0x00,0xFF);
	firePal256[0x0D].SetRGBA(0xDE,0x52,0x00,0xFF);
	firePal256[0x0E].SetRGBA(0xDE,0x52,0x00,0xFF);
	firePal256[0x0F].SetRGBA(0xD6,0x5A,0x00,0xFF);
	firePal256[0x10].SetRGBA(0xD6,0x5A,0x00,0xFF);
	firePal256[0x11].SetRGBA(0xD6,0x63,0x08,0xFF);
	firePal256[0x12].SetRGBA(0xCE,0x6B,0x08,0xFF);
	firePal256[0x13].SetRGBA(0xCE,0x73,0x08,0xFF);
	firePal256[0x14].SetRGBA(0xCE,0x7B,0x08,0xFF);
	firePal256[0x15].SetRGBA(0xCE,0x84,0x10,0xFF);
	firePal256[0x16].SetRGBA(0xC6,0x84,0x10,0xFF);
	firePal256[0x17].SetRGBA(0xC6,0x8C,0x10,0xFF);
	firePal256[0x18].SetRGBA(0xC6,0x94,0x18,0xFF);
	firePal256[0x19].SetRGBA(0xBD,0x9C,0x18,0xFF);
	firePal256[0x1A].SetRGBA(0xBD,0x9C,0x18,0xFF);
	firePal256[0x1B].SetRGBA(0xBD,0xA5,0x21,0xFF);
	firePal256[0x1C].SetRGBA(0xBD,0xA5,0x21,0xFF);
	firePal256[0x1D].SetRGBA(0xBD,0xAD,0x29,0xFF);
	firePal256[0x1E].SetRGBA(0xB5,0xAD,0x29,0xFF);
	firePal256[0x1F].SetRGBA(0xB5,0xB5,0x29,0xFF);
	firePal256[0x20].SetRGBA(0xB5,0xB5,0x31,0xFF);
	firePal256[0x21].SetRGBA(0xCE,0xCE,0x6B,0xFF);
	firePal256[0x22].SetRGBA(0xDE,0xDE,0x9C,0xFF);
	firePal256[0x23].SetRGBA(0xEF,0xEF,0xC6,0xFF);
	firePal256[0x24].SetRGBA(0xFF,0xFF,0xFF,0xFF);

	for(i = 0x25; i <= 0xFE; i++) 
	{
	firePal256[i].SetRGBA(0x00,0x00,0x00,0xFF);
    }
	firePal256[0xFF].SetRGBA(0xFF,0xFF,0xFF,0xFF);

	for(i = 0; i < (64*128); i++) 
    {
        if(i == 0)
        fireBuffer2[i] = 0x01;      
        else if(i < 8128)
        fireBuffer2[i] = 0x00;
        else
        fireBuffer2[i] = 0x24;
    }
}

//
// R_FirePSXTicker
//

static void R_FirePSXTicker(void)
{
    if((level.time & 1))
	{
        R_FirePSX(fireBuffer2);
    }
}

//
// R_DrawFirePSX
//

static void R_DrawFirePSX(float offset)
{
    int i;
    //
    // copy fire pixel data to texture data array
    //
    memset(firetexture2, 0, sizeof(int) * FIRESKY_WIDTH * FIRESKY_HEIGHT);
    for(i = 0; i < FIRESKY_WIDTH * FIRESKY_HEIGHT; i++)
	{
        byte rgb[4];

        rgb[0] = firePal256[fireBuffer2[i]].r;
        rgb[1] = firePal256[fireBuffer2[i]].g;
        rgb[2] = firePal256[fireBuffer2[i]].b;
		rgb[3] = firePal256[fireBuffer2[i]].a;

		if(sky->flags & SKFS_FIREPSX_GREY/* || gl_fixedcolormap == CM_FIRSTSPECIALCOLORMAP*/)
		{
			float gray = (rgb[0] * 0.3 + rgb[1] * 0.56 + rgb[2] * 0.14);	
			rgb[0] = rgb[1] = rgb[2] = gray;
		}
		firetexture2[i] =  MAKEARGB(rgb[3], rgb[0], rgb[1], rgb[2]);
    }

	FHardwareTexture *firetex;
	firetex = new FHardwareTexture(64, 128, false, false, false, true);
	firetex->CreateTexture(NULL, 64, 128, false, 0, CM_DEFAULT);
	glFlush();
	firetex->Bind(0, CM_DEFAULT);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    glTexSubImage2D(GL_TEXTURE_2D,0,0,0,FIRESKY_WIDTH,FIRESKY_HEIGHT,GL_RGBA,GL_UNSIGNED_BYTE,firetexture2);

	float pos1;

	SKYVIEWPOS(viewangle, 3, pos1);

	float x = -64;
	float y = 112-offset; 
	int width = 640; 
	int height = 128;
    float u1 = pos1;	
	float u2 = 8.0f + pos1;
	float v1 = 0.0f;	
	float v2 = 1.0f; 

    float left = x;
    float right = left + width;
    float bottom = y;
    float top = bottom + height;

	float v00[5]={ left , top   , (0.0f), u1, v1};
	float v01[5]={ right, top   , (0.0f), u2, v1};
	float v02[5]={ left , bottom, (0.0f), u1, v2};
	float v03[5]={ right, bottom, (0.0f), u2, v2};

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(-160.0f, -120, -160.0f);

	glColor4f(1.0f,1.0f,1.0f,1.0f);
	glBegin(GL_TRIANGLE_STRIP);
	glColor4ub(sky->highcolor>>16,sky->highcolor>>8,sky->highcolor,0xff);
	glTexCoord2f(v00[3], v00[4]);
	glVertex3f(v00[0], v00[1], v00[2]);
	glTexCoord2f(v01[3], v01[4]);
	glVertex3f(v01[0], v01[1], v01[2]);
	glColor4ub(sky->lowcolor>>16,sky->lowcolor>>8,sky->lowcolor,0xff);
	glTexCoord2f(v02[3], v02[4]);
	glVertex3f(v02[0], v02[1], v02[2]);
	glTexCoord2f(v03[3], v03[4]);
	glVertex3f(v03[0], v03[1], v03[2]);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]

	firetex->Clean(true);
}


//
// R_DrawFrontLayer [GEC]
//

static void R_DrawFrontLayer( int CM_Index,int color)
{
	FTexture * face = TexMan[TexMan.GetTexture("-noflat-", FTexture::TEX_Wall, FTextureManager::TEXMAN_TryAny|FTextureManager::TEXMAN_Overridable)];
	FMaterial * tex = FMaterial::ValidateTexture(face);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	//gl_RenderState.BlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE_MINUS_SRC_COLOR);
	gl_RenderState.SetTextureMode(TM_MASK);
	gl_RenderState.Apply();

	glSetView(2048);//[GEC]

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glPushMatrix();

	glTranslatef(0, 0, -100.0f);
	
	glColor3ub(color>>16,color>>8,color);

	glColor4f(flashcolor.r/255.0f, flashcolor.g/255.0f, flashcolor.b/255.0f,flashcolor.a/255.0f);
	//gl_RenderState.BlendFunc(GL_SRC_ALPHA,GL_ONE);
	gl_RenderState.BlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);

	glBegin(GL_TRIANGLE_FAN);
	glTexCoord2f(1, 0);
	glVertex3f(512.f, 512.f, -0.f);
	glTexCoord2f(0, 0);
	glVertex3f(-512.f, 512.f, -0.f);
	glTexCoord2f(0, 1);
	glVertex3f(-512.f, -512.f, -0.f);
	glTexCoord2f(1, 1);
	glVertex3f(512.f, -512.f, -0.f);
	glEnd();
	glPopMatrix();

	glSetView(FieldOfView);//[GEC]

	gl_RenderState.SetTextureMode(TM_MODULATE);
	gl_RenderState.Apply();

	/*FSkyBox * sb = static_cast<FSkyBox*>(gltex->tex);

	FMaterial * tex;

	FTexture * face;
	face = TexMan[TexMan.GetTexture("-noflat-", FTexture::TEX_Wall, FTextureManager::TEXMAN_TryAny|FTextureManager::TEXMAN_Overridable)];
	tex = FMaterial::ValidateTexture(face);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	//gl_RenderState.SetTextureMode(TM_MASK);
	//gl_RenderState.BlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ONE_MINUS_SRC_COLOR);
	//gl_RenderState.Apply();

	glColor3ub(color>>16,color>>8,color);
	glBegin(GL_TRIANGLE_FAN);
	glTexCoord2f(1, 0);
	glVertex3f(384.f, 192.f, -160.0f);
	glTexCoord2f(0, 0);
	glVertex3f(-384.f, 192.f, -160.0f);
	glTexCoord2f(0, 1);
	glVertex3f(-384.f, -192.f, -160.0f);
	glTexCoord2f(1, 1);
	glVertex3f(384.f, -192.f, -160.0f);
	glEnd();

	gl_RenderState.BlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);//normal
	gl_RenderState.SetTextureMode(TM_MODULATE);
	gl_RenderState.Apply();*/
}

//
// R_DrawBackgroundColor [GEC]
//

static void R_DrawBackgroundColor(int CM_Index,int color)
{
	FTexture * face = TexMan[TexMan.GetTexture("-noflat-", FTexture::TEX_Wall, FTextureManager::TEXMAN_TryAny|FTextureManager::TEXMAN_Overridable)];
	FMaterial * tex = FMaterial::ValidateTexture(face);

	gl_RenderState.SetTextureMode(TM_MASK);
	tex->Bind(CM_Index, GLT_CLAMPX|GLT_CLAMPY, 0);
	gl_RenderState.Apply();

	

	glColor3ub(color>>16,color>>8,color);
	glBegin(GL_TRIANGLE_FAN);
	glTexCoord2f(1, 0);
	glVertex3f(384.f, 192.f, -256.f);
	glTexCoord2f(0, 0);
	glVertex3f(-384.f, 192.f, -256.f);
	glTexCoord2f(0, 1);
	glVertex3f(-384.f, -192.f, -256.f);
	glTexCoord2f(1, 1);
	glVertex3f(384.f, -192.f, -256.f);
	glEnd();
	gl_RenderState.SetTextureMode(TM_MODULATE);
	gl_RenderState.Apply();
}

//
// R_DrawSky
//

void R_DrawSky(int CM_Index)
{
	float offset = 0.f;
	
	if(sky->flags & SKFS_AJUSTTOPOFFSET && gamestate != GS_TITLELEVEL)// && SBarInfoScript[SCRIPT_CUSTOM]->height != 0
		//&& SBarInfoScript[SCRIPT_CUSTOM]->resW != 0 && SBarInfoScript[SCRIPT_CUSTOM]->resH != 0)
	{

		/*int height = (screenblocks*SCREENHEIGHT/10) & ~7;
		int width = (screenblocks*SCREENWIDTH/10);

		Printf("width %d, height %d\n",width,height);*/
		/*float height = 0.f;

		if (screenblocks <= 10 && screenblocks >= 10)
		{
			height = (float)(screen->GetHeight() - viewheight)/2;
			SBarInfoScript[SCRIPT_CUSTOM]->Sheight = height;
		}

		if (screenblocks <= 10) offset = (float)SBarInfoScript[SCRIPT_CUSTOM]->Sheight/2;*/

		if (screenblocks <= 10) offset = 23;//(float)(SBarInfoScript[SCRIPT_CUSTOM]->height/2)+1;
		else offset = 8.5;
	}

	R_DrawBackgroundColor(0/*CM_Index*/,0x000000);

	if(sky->flags & SKFS_VOID)
	{
		R_DrawBackgroundColor(0/*CM_Index*/,sky->basecolor);
	}
	else if(sky->flags & SKFS_CLOUD) 
	{
		R_DrawClouds(0/*CM_Index*/,offset);
    }
	else if(sky->flags & SKFS_FIRE) 
	{
        R_DrawFireD64(offset);
    }
	else if(sky->flags & SKFS_FIREPSX) 
	{
        R_DrawFirePSX(offset);
    }
	else 
	{
		if(sky->flags & SKFS_SKYPSX) 
		{
			R_DrawSimpleSky_PSX(0/*CM_Index*/,0,128.0 + offset);
		}
		else
		{
			R_DrawSimpleSky_N64(0/*CM_Index*/,0,128 + offset);
		}
    }

    if(sky->flags & SKFS_FADEBACK) 
	{
		R_DrawTitleSky(0/*CM_Index*/,offset);
    }
    else if(sky->flags & SKFS_BACKGROUND) 
	{
        R_DrawSimpleSky_N64(0/*CM_Index*/,1,170 + offset);
    }

	//if(gl_fixedcolormap == CM_FIRSTSPECIALCOLORMAP && (sky->flags & SKFS_SKYPSX))
	//{R_DrawFrontLayer(gltex,CM_Index,0xFFFFFF);}
	//R_DrawFrontLayer(gltex,CM_Index,0xFFFFFF);
}

//
// R_SkyTicker
//

void R_SkyTicker(void)
{
	if(drawsky)
	{
		if(!sky)
			return;

		if((paused !=0) && !(menuactive == MENU_Off) && !(ConsoleState == c_up)) 
			return;

		if(sky->flags & SKFS_CLOUD) 
		{
			R_CloudTicker();
		}

		if(sky->flags & SKFS_FIRE) 
		{
			R_FireD64Ticker();
		}

		if(sky->flags & SKFS_FIREPSX) 
		{
			R_FirePSXTicker();
		}

		if(sky->flags & SKFS_FADEBACK) 
		{
			R_TitleSkyTicker();
		}
	}
}

//
// P_SetupSky
//

void R_SetupSky(void)
{
	int i;

	FMaterial * gltex = FMaterial::ValidateTexture(level.skytexture1, true);
	sky = static_cast<FSkyBox*>(gltex->tex);

	if(!sky)
        return;

    thunderCounter = 180;
    skyfadeback = false;
    logoAlpha = 0;
	M_ClearRandom_();

	if(sky->flags & SKFS_FIRE) 
	{
		FIRESKY_WIDTH = 64;
		FIRESKY_HEIGHT = 64;
		R_InitFireD64();

		if((sky->flags & SKFS_RAISINGFIRE))
		{
			for(i = 0; i < 4032; i++)
				fireBuffer[i] = 0x00;

			for(i = 4032; i < 4096; i++)
				fireBuffer[i] = 0xF0;

			for(i = 0; i < 4096; i++)
			{
				fireBuffer[i] >>= 4;
			}
		}
    }

	if(sky->flags & SKFS_FIREPSX) 
	{
		FIRESKY_WIDTH = 64;
		FIRESKY_HEIGHT = 128;
		R_InitFirePSX();

		if(!(sky->flags & SKFS_RAISINGFIRE))
		{
			for(i = 0; i < 64; i++)
				R_FirePSX(fireBuffer2);
		}
    }
}

void R_ShowSky(bool enable)
{
	drawsky = enable;
}